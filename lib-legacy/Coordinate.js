function Coordinate(x, y){  this.x;  this.y;  this.setX(x);  this.setY(y);  };Coordinate.prototype.cloneme = function() {  return new Coordinate(this.getX(), this.getY());}Coordinate.prototype.getX = function(){  return this.x;};Coordinate.prototype.setX = function(x){  if (typeof UnitValue !== 'undefined')  {    if (x.constructor == Number)    {      this.x = UnitValue(new Number(x), CSGlobal.getData('applicationUnitsString'));    }    else if (x.constructor == UnitValue)    {      this.x = x;    }    else    {      throw new CollageException("Coordinate value x is not a Number or UnitValue.");    }  }  else  {    if (x.constructor == Number)    {      this.x = new Number(x);    }    else    {      throw new CollageException("Coordinate value x is not a Number.");    }  } };Coordinate.prototype.adjustX = function(diffX){  if (typeof(diffX) == 'undefined' || diffX.constructor != UnitValue)  {    throw new CollageException("diffX is not set or is not a UnitValue");  }  else  {    /* Check that units are the same */    if (this.getX().type == diffX.type)    {      this.setX((this.getX().value + diffX.value));    }    else    {      throw new CollageException("X and diffX do not have the same units (" + this.getX().type + ", " + diffX.type + "). Cannot adjust.");    }  }};Coordinate.prototype.getY = function(){    return this.y;};Coordinate.prototype.setY = function(y){  if (typeof UnitValue !== 'undefined')  {    if (y.constructor == Number)    {      this.y = UnitValue(new Number(y), CSGlobal.getData('applicationUnitsString'));    }    else if (y.constructor == UnitValue)    {      this.y = y;    }    else    {      throw new CollageException("Coordinate value y is not a Number or UnitValue.");    }  }  else  {    if (y.constructor == Number)    {      this.y = new Number(y);    }    else    {      throw new CollageException("Coordinate value y is not a Number.");    }  } };Coordinate.prototype.adjustY = function(diffY){  if (typeof(diffY) == 'undefined' || diffY.constructor != UnitValue)  {    throw new CollageException("diffY is not set or is not a UnitValue");  }  else  {    /* Check that units are the same */    if (this.getY().type == diffY.type)    {      /* Should this be a minus here because in Ps Y axis is opposite from Cartesian Y? */      this.setY((this.getY().value + diffY.value));    }    else    {      throw new CollageException("Y and diffY do not have the same (" + this.getY().type + ", " + diffY.type + ") units. Cannot adjust.");    }  }};Coordinate.prototype.clone = function(){  return new Coordinate(this.getX(), this.getY());};/* Returns coordinate as new Coordinate object in centimeters */Coordinate.prototype.toCm = function(){  return new Coordinate(UnitValue(this.getX().as('cm'), 'cm'), UnitValue(this.getY().as('cm'), 'cm'));};/* Returns coordinate as new Coordinate object in 'pt' (points) units */Coordinate.prototype.toPt = function(){  return new Coordinate(UnitValue(this.getX().as('pt'), 'pt'), UnitValue(this.getY().as('pt'), 'pt'));};/* Returns coordinate as Array in 'pt' (points) units */Coordinate.prototype.toPtArray = function(){  return [this.getX().as('pt'), this.getY().as('pt')];};