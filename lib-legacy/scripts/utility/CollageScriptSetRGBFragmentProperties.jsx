#include "../../Include.js";CSGlobal.setDebugLevel(1);/*Using the Photoshop Line Tool, drag a line across a smob (smart object fragment used to build RGB pieces).The line drag begins at the origin or pole (O) of a polar coordinate system. The line you draw is the Ray (r)to the point (p), which is the point where the the dragging out of the line is stopped.Line Tool details:With single drag of line tool, there is one pathItem in pathItems array at key 0With single drag of line tool, there is one subPathItem in pathItems[0]With single drag of line tool, there are 4 pathPoint objects in subPathItems[0], line has thickness...therefore a box outlines itEach pathPoint anchor property has a length of 2, x and y coordinateIf line is dragged from topleft to bottomright, the 4 pathPoints are ordered in array from topleft point then clockwise...like css borders, etc.If line is dragged from bottomright to topleft, the 4 pathPoints are ordered in array from bottomright point then clockwise...like css borders, etc.*/try{  // Create Fragment from open active Ps smob document, assumes one smart object layer in file  var f = new Fragment();  f.setFragmentDocument(app.activeDocument);  f.setKey(0);  f.setFragmentLayer(f.getFragmentDocument().artLayers[f.getKey()]);      var docRef = f.getFragmentDocument();  var layerRef = f.getFragmentLayer();  var pathRef = docRef.pathItems[0];  var subpathRef = pathRef.subPathItems[0];  // Picking pathPoint anchors 1 and 3, since we want to determine the angle of the line   // relative to the horizontal (polar) axis. Either of the (most likely long) sides will do.  var a1 = pathRef.subPathItems[0].pathPoints[0].anchor;  var a2 = pathRef.subPathItems[0].pathPoints[3].anchor;    // Coordinate at O (Ps coordinate system with origin in upper-left)  var coordO = new Coordinate(a1[0], a1[1]);  CSGlobal.csDebug(1, "Coordinate at O: " + coordO.getX()/docRef.resolution + ", " + coordO.getY()/docRef.resolution);    // Coordinate at point p (of radial) (Ps coordinate system with origin in upper-left)  var coordp = new Coordinate(a2[0], a2[1]);  CSGlobal.csDebug(1, "Coordinate at p: " + coordp.getX()/docRef.resolution + ", " + coordp.getY()/docRef.resolution);      var g = new Geometry();    // Determine angle of r relative to horizontal axis  var angle = g.getAngle(coordO, coordp);  CSGlobal.csDebug(1, "Angle: " + angle);    // This essentially moves the Ps coordinate system origin to the middle of the fragment  // to determine then cx and cy, which is the adjusted coordinate location of O  var cx = (coordO.getX()/docRef.resolution) - (f.getWidth()/2);  var cy = (coordO.getY()/docRef.resolution) - (f.getHeight()/2);    // Should probably make it so a cx and cy can ONLY be written via this script!    var keywords = {};  // Rotation in Ps in opposite sense, clockwise is "positive", hence the "-"  keywords.a = -angle;   keywords.cx = cx;  // Y direction in Ps coordinate system is opposite a cartesian system, Y upwards from x axis is negative direction in Ps  keywords.cy = -cy;  f.setKeywords(keywords);      pathRef.remove();  docRef.save();  docRef.close();}catch (e){ CSGlobal.csDebug(1,e.message);}