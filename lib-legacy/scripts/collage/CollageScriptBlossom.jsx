#include "../../Include.jsx";CSGlobal.setDebugLevel(1);var APPLICATION_ROOT = '/Users/calhoun/Work/Blossom';var canvas = new CanvasGridBlossom();CSGlobal.registerCanvas(canvas);canvas.setCanvasRoot(APPLICATION_ROOT);canvas.setName('test.psd');canvas.setWidth(74);canvas.setHeight(74); //canvas.setWidth(100);//canvas.setHeight(100);canvas.setCanvasOffset(3);canvas.setApplyRemainder(true)canvas.setGridGutter(1.5);canvas.setGridSize(6);try{  canvas.initCanvas();  //This opens for the CanvasGridBlossom the quadreport.txt files generated during ICA run  canvas.open();    // Write roadmap (for printing blocks later in sequence for collage, real paper!)  var roadmap_file = new File(canvas.getCanvasRoot() + "/roadmap.txt");  roadmap_file.open('w');    var entries = canvas.getEntries();  entries = canvas.shuffle(entries);  var legend = canvas.getLegend();    for (var j = 0; j < entries.length; j++)  {    var roadmap_quad = new Array();    var quad = entries[j]['quad'];    roadmap_quad = {'quad':quad};    CSGlobal.csDebug(2,j);    CSGlobal.csDebug(2,quad);      var mask = entries[j]['mask'];    var benchmarks = mask.split('-');        var marks = new Array();    for (var b = 0; b < benchmarks.length; b++)    {      CSGlobal.csDebug(2,benchmarks[b]);      marks[b] = APPLICATION_ROOT + '/' + legend[0][(benchmarks[b])];            var tmp = roadmap_quad;      tmp[('mark'+(b+1))] = marks[b];      CSGlobal.csDebug(2,marks[b]);    }        var series = new MarkSeriesRGB();    series.setPaletteCluster(marks);    series.setShuffle(true);    series.setShuffleCluster(false);    canvas.mark(series, canvas.quadToCoordinate(quad));        var tmp = roadmap_quad;    for (var b = 0; b < series.marks.length; b++)    {      roadmap_quad[('mark'+(b+1))] += "/"+series.marks[b].getFragment().getFragmentName();    }      var stacking = series.lastShuffle;    stacking.reverse();    roadmap_quad['stack'] = new String('');    for (var b = 0; b < stacking.length; b++)    {      roadmap_quad['stack'] += stacking[b].getCornerNumber();      if (b != (stacking.length - 1))      {        roadmap_quad['stack'] += '-';      }    }      roadmap_file.write(JSON.stringify(roadmap_quad));    roadmap_file.write("\n");  }  roadmap_file.close();}catch (e){  $.writeln(e.message);}CSGlobal.setEnableNotifiers(false);