#include "../../Include.jsx";app.preferences.rulerUnits = Units.CM;var APPLICATION_ROOT = '/Users/calhoun/Work/CollageScript';var canvas = new CanvasGridSequence();canvas.setCanvasRoot(APPLICATION_ROOT);canvas.setName('test-canvasgrid.psd');canvas.setWidth(40);canvas.setHeight(40);canvas.setCanvasOffset(1);canvas.setGridGutter(1);canvas.setGridSize(2);canvas.setApplyRemainder(false);//canvas.setGridSizeX(7);//canvas.setGridSizeY(15);//canvas.setGridDirection('vertical');//canvas.setSwatchShuffle(false);try{  CSGlobal.csDebug(1,"Setting canvas...");  var docRef = canvas.initCanvas();  var coords = canvas.getCoordinateArray();    CSGlobal.csDebug(1,"Number of coordinates: " + coords.length);  CSGlobal.csDebug(1,"Number of quads: " + canvas.getNumberOfQuads());  CSGlobal.csDebug(1,"Number of quad rows: " + canvas.getNumberOfQuadRows());  CSGlobal.csDebug(1,"Number of quad cols: " + canvas.getNumberOfQuadCols());    var coord = coords[0];  CSGlobal.csDebug(1,"Coordinate: " + coord.getX() + ", " + coord.getY());    var quad = canvas.coordinateToQuad(coord);  CSGlobal.csDebug(1,"Quad: " + quad);    var backToCoord = canvas.quadToCoordinate(quad);  CSGlobal.csDebug(1,"Back to coord: " + backToCoord.getX() + ", " + backToCoord.getY());    CSGlobal.csDebug(1,"Row number: " + canvas.coordinateToRow(backToCoord));  CSGlobal.csDebug(1,"Column number: " + canvas.coordinateToCol(backToCoord));  //docRef.close();}catch (e){  CSGlobal.csDebug(1,e.message);}